"""init

Revision ID: 7492b40ef4bc
Revises: 
Create Date: 2025-08-02 00:48:12.181443

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '7492b40ef4bc'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('market_change_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('condition_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('change_type', sa.Enum('ADDED', 'DELETED', name='marketchangetype'), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('markets',
    sa.Column('condition_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_tradable', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('condition_id')
    )
    op.create_table('sync_hot_markets',
    sa.Column('condition_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('question', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tokens', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('condition_id')
    )
    op.create_table('users',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('balance', sa.Numeric(precision=14, scale=2), nullable=True),
    sa.CheckConstraint('balance >= 0', name='balance_non_negative'),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('market_outcomes',
    sa.Column('market', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('outcome_text', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_winner', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['market'], ['markets.condition_id'], ),
    sa.PrimaryKeyConstraint('market', 'token')
    )
    op.create_table('orders',
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('user_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('market', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('side', sa.Enum('BUY', 'SELL', name='orderside'), nullable=False),
    sa.Column('order_type', sa.Enum('MARKET', 'LIMIT', name='ordertype'), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'PARTIAL', 'FILLED', 'CANCELLED', name='orderstatus'), nullable=False),
    sa.Column('amount_usdc', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('shares', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('amount_usdc >= 0', name='_amount_usdc_non_negative'),
    sa.CheckConstraint('shares >= 0', name='_order_shares_non_negative'),
    sa.ForeignKeyConstraint(['market', 'token'], ['market_outcomes.market', 'market_outcomes.token'], ),
    sa.ForeignKeyConstraint(['user_name'], ['users.name'], ),
    sa.PrimaryKeyConstraint('order_id')
    )
    op.create_table('payout_logs',
    sa.Column('user_name', sa.Integer(), nullable=False),
    sa.Column('market', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('shares_paid', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('is_winner', sa.Boolean(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['market', 'token'], ['market_outcomes.market', 'market_outcomes.token'], ),
    sa.ForeignKeyConstraint(['user_name'], ['users.name'], ),
    sa.PrimaryKeyConstraint('user_name', 'market', 'token')
    )
    op.create_table('user_positions',
    sa.Column('user_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('market', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('shares', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.CheckConstraint('shares >= 0', name='_user_shares_non_negative'),
    sa.ForeignKeyConstraint(['market', 'token'], ['market_outcomes.market', 'market_outcomes.token'], ),
    sa.ForeignKeyConstraint(['user_name'], ['users.name'], ),
    sa.PrimaryKeyConstraint('user_name', 'market', 'token')
    )
    op.create_table('order_fills',
    sa.Column('fill_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('fill_price', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('fill_shares', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('filled_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('fill_price >= 0', name='_fill_price_non_negative'),
    sa.CheckConstraint('fill_shares >= 0', name='_fill_shares_non_negative'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.order_id'], ),
    sa.PrimaryKeyConstraint('fill_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('order_fills')
    op.drop_table('user_positions')
    op.drop_table('payout_logs')
    op.drop_table('orders')
    op.drop_table('market_outcomes')
    op.drop_table('users')
    op.drop_table('sync_hot_markets')
    op.drop_table('markets')
    op.drop_table('market_change_logs')
    # ### end Alembic commands ###
